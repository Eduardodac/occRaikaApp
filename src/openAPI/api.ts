/* tslint:disable */
/* eslint-disable */
/**
 * WebAPIAutores
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CoordenadasDTO
 */
export interface CoordenadasDTO {
    /**
     * 
     * @type {string}
     * @memberof CoordenadasDTO
     */
    'coordenadasId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CoordenadasDTO
     */
    'latitud'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CoordenadasDTO
     */
    'longitud'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CoordenadasDTO
     */
    'descripcion'?: string | null;
}
/**
 * 
 * @export
 * @interface CrearUsuario
 */
export interface CrearUsuario {
    /**
     * 
     * @type {string}
     * @memberof CrearUsuario
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CrearUsuario
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof CrearUsuario
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CrearUsuario
     */
    'apellidoPaterno'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CrearUsuario
     */
    'apellidoMaterno'?: string | null;
}
/**
 * 
 * @export
 * @interface CredencialesUsuario
 */
export interface CredencialesUsuario {
    /**
     * 
     * @type {string}
     * @memberof CredencialesUsuario
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CredencialesUsuario
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface PerfilExternoLaicoDTO
 */
export interface PerfilExternoLaicoDTO {
    /**
     * 
     * @type {string}
     * @memberof PerfilExternoLaicoDTO
     */
    'perfilExternoLaicoId'?: string;
    /**
     * 
     * @type {string}
     * @memberof PerfilExternoLaicoDTO
     */
    'foto'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PerfilExternoLaicoDTO
     */
    'santoPatron'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PerfilExternoLaicoDTO
     */
    'zonaPerteneciente'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PerfilExternoLaicoDTO
     */
    'parroquia'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PerfilExternoLaicoDTO
     */
    'decanato'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PerfilExternoLaicoDTO
     */
    'desarrolloApostolado'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PerfilExternoLaicoDTO
     */
    'direccionCapilla'?: string | null;
}
/**
 * 
 * @export
 * @interface RespuestaAutenticacion
 */
export interface RespuestaAutenticacion {
    /**
     * 
     * @type {string}
     * @memberof RespuestaAutenticacion
     */
    'token'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RespuestaAutenticacion
     */
    'expiracion'?: string;
}
/**
 * 
 * @export
 * @interface UserGetDTO
 */
export interface UserGetDTO {
    /**
     * 
     * @type {string}
     * @memberof UserGetDTO
     */
    'nombre'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserGetDTO
     */
    'apellidoPaterno'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserGetDTO
     */
    'apellidoMaterno'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserGetDTO
     */
    'calle'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserGetDTO
     */
    'colonia'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserGetDTO
     */
    'codigoPostal'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserGetDTO
     */
    'municipio'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserGetDTO
     */
    'entidadFederativa'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserGetDTO
     */
    'telefonoFijo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserGetDTO
     */
    'celular'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserGetDTO
     */
    'condicionVida'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserGetDTO
     */
    'sexo'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserGetDTO
     */
    'fechaNacimiento'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserGetDTO
     */
    'estadoCivil'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserGetDTO
     */
    'nacionalidad'?: string | null;
}

/**
 * CoordenadasApi - axios parameter creator
 * @export
 */
export const CoordenadasApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CoordenadasGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Coordenadas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CoordenadasDTO} [coordenadasDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CoordenadasPost: async (coordenadasDTO?: CoordenadasDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/Coordenadas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(coordenadasDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoordenadasApi - functional programming interface
 * @export
 */
export const CoordenadasApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoordenadasApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CoordenadasGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CoordenadasDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CoordenadasGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CoordenadasDTO} [coordenadasDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CoordenadasPost(coordenadasDTO?: CoordenadasDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CoordenadasPost(coordenadasDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CoordenadasApi - factory interface
 * @export
 */
export const CoordenadasApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoordenadasApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CoordenadasGet(options?: any): AxiosPromise<Array<CoordenadasDTO>> {
            return localVarFp.apiV1CoordenadasGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CoordenadasDTO} [coordenadasDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CoordenadasPost(coordenadasDTO?: CoordenadasDTO, options?: any): AxiosPromise<void> {
            return localVarFp.apiV1CoordenadasPost(coordenadasDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CoordenadasApi - object-oriented interface
 * @export
 * @class CoordenadasApi
 * @extends {BaseAPI}
 */
export class CoordenadasApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoordenadasApi
     */
    public apiV1CoordenadasGet(options?: AxiosRequestConfig) {
        return CoordenadasApiFp(this.configuration).apiV1CoordenadasGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CoordenadasDTO} [coordenadasDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoordenadasApi
     */
    public apiV1CoordenadasPost(coordenadasDTO?: CoordenadasDTO, options?: AxiosRequestConfig) {
        return CoordenadasApiFp(this.configuration).apiV1CoordenadasPost(coordenadasDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PerfilExternoLaicoApi - axios parameter creator
 * @export
 */
export const PerfilExternoLaicoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPerfilExternoLaicoGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/PerfilExternoLaico`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPerfilExternoLaicoIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiPerfilExternoLaicoIdDelete', 'id', id)
            const localVarPath = `/api/PerfilExternoLaico/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPerfilExternoLaicoIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiPerfilExternoLaicoIdGet', 'id', id)
            const localVarPath = `/api/PerfilExternoLaico/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {PerfilExternoLaicoDTO} [perfilExternoLaicoDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPerfilExternoLaicoIdPut: async (id: string, perfilExternoLaicoDTO?: PerfilExternoLaicoDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiPerfilExternoLaicoIdPut', 'id', id)
            const localVarPath = `/api/PerfilExternoLaico/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(perfilExternoLaicoDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PerfilExternoLaicoDTO} [perfilExternoLaicoDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPerfilExternoLaicoPost: async (perfilExternoLaicoDTO?: PerfilExternoLaicoDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/PerfilExternoLaico`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(perfilExternoLaicoDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PerfilExternoLaicoApi - functional programming interface
 * @export
 */
export const PerfilExternoLaicoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PerfilExternoLaicoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPerfilExternoLaicoGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PerfilExternoLaicoDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPerfilExternoLaicoGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPerfilExternoLaicoIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPerfilExternoLaicoIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPerfilExternoLaicoIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PerfilExternoLaicoDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPerfilExternoLaicoIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {PerfilExternoLaicoDTO} [perfilExternoLaicoDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPerfilExternoLaicoIdPut(id: string, perfilExternoLaicoDTO?: PerfilExternoLaicoDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPerfilExternoLaicoIdPut(id, perfilExternoLaicoDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PerfilExternoLaicoDTO} [perfilExternoLaicoDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPerfilExternoLaicoPost(perfilExternoLaicoDTO?: PerfilExternoLaicoDTO, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPerfilExternoLaicoPost(perfilExternoLaicoDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PerfilExternoLaicoApi - factory interface
 * @export
 */
export const PerfilExternoLaicoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PerfilExternoLaicoApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPerfilExternoLaicoGet(options?: any): AxiosPromise<Array<PerfilExternoLaicoDTO>> {
            return localVarFp.apiPerfilExternoLaicoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPerfilExternoLaicoIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiPerfilExternoLaicoIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPerfilExternoLaicoIdGet(id: string, options?: any): AxiosPromise<PerfilExternoLaicoDTO> {
            return localVarFp.apiPerfilExternoLaicoIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {PerfilExternoLaicoDTO} [perfilExternoLaicoDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPerfilExternoLaicoIdPut(id: string, perfilExternoLaicoDTO?: PerfilExternoLaicoDTO, options?: any): AxiosPromise<void> {
            return localVarFp.apiPerfilExternoLaicoIdPut(id, perfilExternoLaicoDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PerfilExternoLaicoDTO} [perfilExternoLaicoDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPerfilExternoLaicoPost(perfilExternoLaicoDTO?: PerfilExternoLaicoDTO, options?: any): AxiosPromise<void> {
            return localVarFp.apiPerfilExternoLaicoPost(perfilExternoLaicoDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PerfilExternoLaicoApi - object-oriented interface
 * @export
 * @class PerfilExternoLaicoApi
 * @extends {BaseAPI}
 */
export class PerfilExternoLaicoApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerfilExternoLaicoApi
     */
    public apiPerfilExternoLaicoGet(options?: AxiosRequestConfig) {
        return PerfilExternoLaicoApiFp(this.configuration).apiPerfilExternoLaicoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerfilExternoLaicoApi
     */
    public apiPerfilExternoLaicoIdDelete(id: string, options?: AxiosRequestConfig) {
        return PerfilExternoLaicoApiFp(this.configuration).apiPerfilExternoLaicoIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerfilExternoLaicoApi
     */
    public apiPerfilExternoLaicoIdGet(id: string, options?: AxiosRequestConfig) {
        return PerfilExternoLaicoApiFp(this.configuration).apiPerfilExternoLaicoIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {PerfilExternoLaicoDTO} [perfilExternoLaicoDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerfilExternoLaicoApi
     */
    public apiPerfilExternoLaicoIdPut(id: string, perfilExternoLaicoDTO?: PerfilExternoLaicoDTO, options?: AxiosRequestConfig) {
        return PerfilExternoLaicoApiFp(this.configuration).apiPerfilExternoLaicoIdPut(id, perfilExternoLaicoDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PerfilExternoLaicoDTO} [perfilExternoLaicoDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerfilExternoLaicoApi
     */
    public apiPerfilExternoLaicoPost(perfilExternoLaicoDTO?: PerfilExternoLaicoDTO, options?: AxiosRequestConfig) {
        return PerfilExternoLaicoApiFp(this.configuration).apiPerfilExternoLaicoPost(perfilExternoLaicoDTO, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/User`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CredencialesUsuario} [credencialesUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserLoginPost: async (credencialesUsuario?: CredencialesUsuario, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/User/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(credencialesUsuario, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CrearUsuario} [crearUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserRegistrarPost: async (crearUsuario?: CrearUsuario, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/User/registrar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(crearUsuario, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserUsuarioGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/User/usuario`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserGetDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CredencialesUsuario} [credencialesUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserLoginPost(credencialesUsuario?: CredencialesUsuario, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RespuestaAutenticacion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserLoginPost(credencialesUsuario, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CrearUsuario} [crearUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserRegistrarPost(crearUsuario?: CrearUsuario, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RespuestaAutenticacion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserRegistrarPost(crearUsuario, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserUsuarioGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserGetDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserUsuarioGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserGet(options?: any): AxiosPromise<Array<UserGetDTO>> {
            return localVarFp.apiV1UserGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CredencialesUsuario} [credencialesUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserLoginPost(credencialesUsuario?: CredencialesUsuario, options?: any): AxiosPromise<RespuestaAutenticacion> {
            return localVarFp.apiV1UserLoginPost(credencialesUsuario, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CrearUsuario} [crearUsuario] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserRegistrarPost(crearUsuario?: CrearUsuario, options?: any): AxiosPromise<RespuestaAutenticacion> {
            return localVarFp.apiV1UserRegistrarPost(crearUsuario, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserUsuarioGet(options?: any): AxiosPromise<UserGetDTO> {
            return localVarFp.apiV1UserUsuarioGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiV1UserGet(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiV1UserGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CredencialesUsuario} [credencialesUsuario] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiV1UserLoginPost(credencialesUsuario?: CredencialesUsuario, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiV1UserLoginPost(credencialesUsuario, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CrearUsuario} [crearUsuario] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiV1UserRegistrarPost(crearUsuario?: CrearUsuario, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiV1UserRegistrarPost(crearUsuario, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiV1UserUsuarioGet(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiV1UserUsuarioGet(options).then((request) => request(this.axios, this.basePath));
    }
}


